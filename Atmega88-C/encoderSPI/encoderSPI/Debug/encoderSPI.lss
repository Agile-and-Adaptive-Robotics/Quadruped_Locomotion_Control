
encoderSPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000736  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064b  00000000  00000000  000008da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000247  00000000  00000000  00000f25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000116c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c4  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000029  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000157d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 30       	cpi	r26, 0x00	; 0
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	35 c0       	rjmp	.+106    	; 0xbe <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:
//}

int main (void) {
	
	// Set up a toggle pin
	DDRC |= (1 << PC5);
  56:	87 b1       	in	r24, 0x07	; 7
  58:	80 62       	ori	r24, 0x20	; 32
  5a:	87 b9       	out	0x07, r24	; 7
	
	// SPI initialization
	DDRB |= (1 << DDB4);							//Set MISO as an output
  5c:	84 b1       	in	r24, 0x04	; 4
  5e:	80 61       	ori	r24, 0x10	; 16
  60:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~((1 << DDB3)|(1 << DDB5)|(1 << DDB2)); // Set MOSI, SCK, and SS pins as inputs (this step is redundant, but makes the code more readable).
  62:	84 b1       	in	r24, 0x04	; 4
  64:	83 7d       	andi	r24, 0xD3	; 211
  66:	84 b9       	out	0x04, r24	; 4

	SPCR = (1 << SPE); // SPI activation -- ATmega configured as peripheral
  68:	80 e4       	ldi	r24, 0x40	; 64
  6a:	8c bd       	out	0x2c, r24	; 44
	
	// Encoder initialization
	EIMSK |= ((1 << INT0)|(1 << INT1)); // Activity on INT0 or INT1 triggers an interrupt
  6c:	8d b3       	in	r24, 0x1d	; 29
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	8d bb       	out	0x1d, r24	; 29
	EICRA |= ((1<<ISC00)|(1<<ISC10));  // Any logical change on INT0 or INT1 generates an interrupt request
  72:	e9 e6       	ldi	r30, 0x69	; 105
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	80 81       	ld	r24, Z
  78:	85 60       	ori	r24, 0x05	; 5
  7a:	80 83       	st	Z, r24
	
	//sei();
	
	PORTC |= ~(1 << PC5);
  7c:	88 b1       	in	r24, 0x08	; 8
  7e:	8f 6d       	ori	r24, 0xDF	; 223
  80:	88 b9       	out	0x08, r24	; 8
	
	SPDR = 0x00; // Load MISO line. This might not be necessary
  82:	1e bc       	out	0x2e, r1	; 46
	
	while (1) {

		if (SPSR & (1<<SPIF)) {
  84:	0d b4       	in	r0, 0x2d	; 45
  86:	07 fe       	sbrs	r0, 7
  88:	fd cf       	rjmp	.-6      	; 0x84 <main+0x2e>
			
			PORTC ^= (1 << PC5); // toggle C5
  8a:	98 b1       	in	r25, 0x08	; 8
  8c:	80 e2       	ldi	r24, 0x20	; 32
  8e:	89 27       	eor	r24, r25
  90:	88 b9       	out	0x08, r24	; 8
			
			char teensy_request = SPDR;
  92:	8e b5       	in	r24, 0x2e	; 46
			
			if (teensy_request == 0xFF) {
  94:	8f 3f       	cpi	r24, 0xFF	; 255
  96:	19 f4       	brne	.+6      	; 0x9e <main+0x48>
				//SPDR = enc_count0 >> 8;
				SPDR = 0xAA;
  98:	9a ea       	ldi	r25, 0xAA	; 170
  9a:	9e bd       	out	0x2e, r25	; 46
  9c:	04 c0       	rjmp	.+8      	; 0xa6 <main+0x50>
			}
			else if (teensy_request == 0x0F) {
  9e:	8f 30       	cpi	r24, 0x0F	; 15
  a0:	11 f4       	brne	.+4      	; 0xa6 <main+0x50>
				//SPDR = enc_count0 & 0xFF;
				SPDR = 0xBB;
  a2:	9b eb       	ldi	r25, 0xBB	; 187
  a4:	9e bd       	out	0x2e, r25	; 46
			}
			if (teensy_request == 0xEE) {
  a6:	8e 3e       	cpi	r24, 0xEE	; 238
  a8:	19 f4       	brne	.+6      	; 0xb0 <main+0x5a>
				//SPDR = enc_count1 >> 8;
				SPDR = 0xCC;
  aa:	8c ec       	ldi	r24, 0xCC	; 204
  ac:	8e bd       	out	0x2e, r24	; 46
  ae:	ea cf       	rjmp	.-44     	; 0x84 <main+0x2e>
			}
			else if (teensy_request == 0x0E) {
  b0:	8e 30       	cpi	r24, 0x0E	; 14
  b2:	19 f4       	brne	.+6      	; 0xba <main+0x64>
				//SPDR = enc_count1 & 0xFF;
				SPDR = 0xDD;
  b4:	8d ed       	ldi	r24, 0xDD	; 221
  b6:	8e bd       	out	0x2e, r24	; 46
  b8:	e5 cf       	rjmp	.-54     	; 0x84 <main+0x2e>
			}
			else {
				SPDR = 0x00;
  ba:	1e bc       	out	0x2e, r1	; 46
  bc:	e3 cf       	rjmp	.-58     	; 0x84 <main+0x2e>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
